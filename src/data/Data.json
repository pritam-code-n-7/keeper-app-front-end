[
  {
    "id": 1,
    "title": "Recursion",
    "content": "Recursion is a programming technique where a function calls itself directly or indirectly. It is a powerful concept that allows solving complex problems by breaking them down into smaller, more manageable subproblems."
  },
  {
    "id": 2,
    "title": "Linked-List",
    "content": "Unlike arrays, a linked list is a linear data structure where elements are stored in nodes, and each node contains a data field and a reference (link) to the next node in the sequence. This allows dynamic memory allocation, efficient insertion/deletion, but it requires more memory due to the storage of explicit links."
  },
  {
    "id": 3,
    "title": "Stack",
    "content": "It follows the Last In, First Out (LIFO) principle, where the last element added is the first one to be removed. Think of it as a collection of items where items are added or removed from the top, resembling a physical stack of plates."
  },
  {
    "id": 4,
    "title": "Queue",
    "content": "It follows the First In, First Out (FIFO) principle, where the first element added is the first one to be removed. Think of it as a line of people waiting for a service, where the person who arrives first gets served first."
  },
  {
    "id": 5,
    "title": "Props",
    "content": "In React, props (short for properties) are a way to pass data from parent components to child components. They are immutable and are passed down from parent to child as arguments to the child component function or as attributes in JSX elements."
  },
  {
    "id": 6,
    "title": "Use-state",
    "content": "In React, the useState hook is used to add state to functional components. State allows components to manage data that can change over time, such as user input, API responses, or UI state."
  }
]
